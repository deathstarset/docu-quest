// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: extractedContents.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addExtractedContent = `-- name: AddExtractedContent :one
INSERT INTO extracted_contents (document_id, content) VALUES ($1, $2) RETURNING id, document_id, content, created_at
`

type AddExtractedContentParams struct {
	DocumentID uuid.UUID
	Content    string
}

func (q *Queries) AddExtractedContent(ctx context.Context, arg AddExtractedContentParams) (ExtractedContent, error) {
	row := q.db.QueryRowContext(ctx, addExtractedContent, arg.DocumentID, arg.Content)
	var i ExtractedContent
	err := row.Scan(
		&i.ID,
		&i.DocumentID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const findExtractedContentByID = `-- name: FindExtractedContentByID :one
SELECT id, document_id, content, created_at FROM extracted_contents WHERE id = $1 LIMIT 1
`

func (q *Queries) FindExtractedContentByID(ctx context.Context, id uuid.UUID) (ExtractedContent, error) {
	row := q.db.QueryRowContext(ctx, findExtractedContentByID, id)
	var i ExtractedContent
	err := row.Scan(
		&i.ID,
		&i.DocumentID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const findExtractedContents = `-- name: FindExtractedContents :many
SELECT id, document_id, content, created_at FROM extracted_contents ORDER BY created_at
`

func (q *Queries) FindExtractedContents(ctx context.Context) ([]ExtractedContent, error) {
	rows, err := q.db.QueryContext(ctx, findExtractedContents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExtractedContent
	for rows.Next() {
		var i ExtractedContent
		if err := rows.Scan(
			&i.ID,
			&i.DocumentID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeExtractedContent = `-- name: RemoveExtractedContent :exec
DELETE FROM extracted_contents WHERE id = $1
`

func (q *Queries) RemoveExtractedContent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeExtractedContent, id)
	return err
}
