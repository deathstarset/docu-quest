// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: embeddings.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addEmbedding = `-- name: AddEmbedding :one
INSERT INTO embeddings (content_id, text, embedding) VALUES ($1, $2, $3) RETURNING id, content_id, text, embedding, created_at
`

type AddEmbeddingParams struct {
	ContentID uuid.UUID
	Text      string
	Embedding interface{}
}

func (q *Queries) AddEmbedding(ctx context.Context, arg AddEmbeddingParams) (Embedding, error) {
	row := q.db.QueryRowContext(ctx, addEmbedding, arg.ContentID, arg.Text, arg.Embedding)
	var i Embedding
	err := row.Scan(
		&i.ID,
		&i.ContentID,
		&i.Text,
		&i.Embedding,
		&i.CreatedAt,
	)
	return i, err
}

const findEmbeddingByID = `-- name: FindEmbeddingByID :one
SELECT id, content_id, text, embedding, created_at FROM embeddings WHERE id = $1 LIMIT 1
`

func (q *Queries) FindEmbeddingByID(ctx context.Context, id uuid.UUID) (Embedding, error) {
	row := q.db.QueryRowContext(ctx, findEmbeddingByID, id)
	var i Embedding
	err := row.Scan(
		&i.ID,
		&i.ContentID,
		&i.Text,
		&i.Embedding,
		&i.CreatedAt,
	)
	return i, err
}

const findEmbeddingsByContentID = `-- name: FindEmbeddingsByContentID :many
SELECT id, content_id, text, embedding, created_at FROM embeddings WHERE content_id = $1
`

func (q *Queries) FindEmbeddingsByContentID(ctx context.Context, contentID uuid.UUID) ([]Embedding, error) {
	rows, err := q.db.QueryContext(ctx, findEmbeddingsByContentID, contentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Embedding
	for rows.Next() {
		var i Embedding
		if err := rows.Scan(
			&i.ID,
			&i.ContentID,
			&i.Text,
			&i.Embedding,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSimilarVec = `-- name: FindSimilarVec :many
SELECT embeddings.id, content_id, text, embedding, embeddings.created_at, extracted_contents.id, document_id, content, extracted_contents.created_at FROM embeddings JOIN extracted_contents ON embeddings.content_id = extracted_contents.id WHERE extracted_contents.document_id = $1 ORDER BY embedding <-> $2 LIMIT 10
`

type FindSimilarVecParams struct {
	DocumentID uuid.UUID
	Embedding  interface{}
}

type FindSimilarVecRow struct {
	ID          uuid.UUID
	ContentID   uuid.UUID
	Text        string
	Embedding   interface{}
	CreatedAt   time.Time
	ID_2        uuid.UUID
	DocumentID  uuid.UUID
	Content     string
	CreatedAt_2 time.Time
}

func (q *Queries) FindSimilarVec(ctx context.Context, arg FindSimilarVecParams) ([]FindSimilarVecRow, error) {
	rows, err := q.db.QueryContext(ctx, findSimilarVec, arg.DocumentID, arg.Embedding)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindSimilarVecRow
	for rows.Next() {
		var i FindSimilarVecRow
		if err := rows.Scan(
			&i.ID,
			&i.ContentID,
			&i.Text,
			&i.Embedding,
			&i.CreatedAt,
			&i.ID_2,
			&i.DocumentID,
			&i.Content,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeEmbedding = `-- name: RemoveEmbedding :exec
DELETE FROM embeddings WHERE id = $1
`

func (q *Queries) RemoveEmbedding(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeEmbedding, id)
	return err
}
