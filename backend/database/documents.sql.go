// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: documents.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addDocument = `-- name: AddDocument :one
INSERT INTO documents (file_path, uploaded_by) VALUES ($1, $2) RETURNING id, file_path, uploaded_at, uploaded_by
`

type AddDocumentParams struct {
	FilePath   string
	UploadedBy uuid.UUID
}

func (q *Queries) AddDocument(ctx context.Context, arg AddDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, addDocument, arg.FilePath, arg.UploadedBy)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.UploadedAt,
		&i.UploadedBy,
	)
	return i, err
}

const findDocumentByID = `-- name: FindDocumentByID :one
SELECT id, file_path, uploaded_at, uploaded_by FROM documents WHERE id = $1 LIMIT 1
`

func (q *Queries) FindDocumentByID(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRowContext(ctx, findDocumentByID, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.UploadedAt,
		&i.UploadedBy,
	)
	return i, err
}

const findDocuments = `-- name: FindDocuments :many
SELECT id, file_path, uploaded_at, uploaded_by FROM documents
`

func (q *Queries) FindDocuments(ctx context.Context) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, findDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.UploadedAt,
			&i.UploadedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDocumentsByUserID = `-- name: FindDocumentsByUserID :many
SELECT id, file_path, uploaded_at, uploaded_by FROM documents WHERE uploaded_by = $1
`

func (q *Queries) FindDocumentsByUserID(ctx context.Context, uploadedBy uuid.UUID) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, findDocumentsByUserID, uploadedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.UploadedAt,
			&i.UploadedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDocument = `-- name: RemoveDocument :exec
DELETE FROM documents WHERE id = $1
`

func (q *Queries) RemoveDocument(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeDocument, id)
	return err
}
