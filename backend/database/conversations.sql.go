// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: conversations.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addConversation = `-- name: AddConversation :one
INSERT INTO conversations (user_id, document_id) VALUES ($1, $2) RETURNING id, started_at, user_id, ended_at, document_id
`

type AddConversationParams struct {
	UserID     uuid.UUID
	DocumentID uuid.UUID
}

func (q *Queries) AddConversation(ctx context.Context, arg AddConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, addConversation, arg.UserID, arg.DocumentID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.StartedAt,
		&i.UserID,
		&i.EndedAt,
		&i.DocumentID,
	)
	return i, err
}

const findConversationByID = `-- name: FindConversationByID :one
SELECT id, started_at, user_id, ended_at, document_id FROM conversations WHERE id = $1 LIMIT 1
`

func (q *Queries) FindConversationByID(ctx context.Context, id uuid.UUID) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, findConversationByID, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.StartedAt,
		&i.UserID,
		&i.EndedAt,
		&i.DocumentID,
	)
	return i, err
}

const findConversations = `-- name: FindConversations :many
SELECT id, started_at, user_id, ended_at, document_id FROM conversations ORDER BY started_at
`

func (q *Queries) FindConversations(ctx context.Context) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, findConversations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.StartedAt,
			&i.UserID,
			&i.EndedAt,
			&i.DocumentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findConversationsByUserID = `-- name: FindConversationsByUserID :many
SELECT id, started_at, user_id, ended_at, document_id FROM conversations WHERE user_id = $1
`

func (q *Queries) FindConversationsByUserID(ctx context.Context, userID uuid.UUID) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, findConversationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.StartedAt,
			&i.UserID,
			&i.EndedAt,
			&i.DocumentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserConversation = `-- name: FindUserConversation :one
SELECT id, started_at, user_id, ended_at, document_id FROM conversations WHERE id = $1 AND user_id = $2 LIMIT 1
`

type FindUserConversationParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) FindUserConversation(ctx context.Context, arg FindUserConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, findUserConversation, arg.ID, arg.UserID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.StartedAt,
		&i.UserID,
		&i.EndedAt,
		&i.DocumentID,
	)
	return i, err
}

const removeConversation = `-- name: RemoveConversation :exec
DELETE FROM conversations WHERE id = $1
`

func (q *Queries) RemoveConversation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeConversation, id)
	return err
}

const removeUserConversation = `-- name: RemoveUserConversation :exec
DELETE FROM conversations WHERE id = $1 AND user_id = $2
`

type RemoveUserConversationParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) RemoveUserConversation(ctx context.Context, arg RemoveUserConversationParams) error {
	_, err := q.db.ExecContext(ctx, removeUserConversation, arg.ID, arg.UserID)
	return err
}
