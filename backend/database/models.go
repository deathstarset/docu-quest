// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type SenderType string

const (
	SenderTypeBot  SenderType = "bot"
	SenderTypeUser SenderType = "user"
)

func (e *SenderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SenderType(s)
	case string:
		*e = SenderType(s)
	default:
		return fmt.Errorf("unsupported scan type for SenderType: %T", src)
	}
	return nil
}

type NullSenderType struct {
	SenderType SenderType
	Valid      bool // Valid is true if SenderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSenderType) Scan(value interface{}) error {
	if value == nil {
		ns.SenderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SenderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSenderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SenderType), nil
}

type UserType string

const (
	UserTypeAdmin UserType = "admin"
	UserTypeUser  UserType = "user"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Conversation struct {
	ID         uuid.UUID
	StartedAt  time.Time
	UserID     uuid.UUID
	EndedAt    sql.NullTime
	DocumentID uuid.UUID
}

type Document struct {
	ID         uuid.UUID
	FilePath   string
	UploadedAt sql.NullTime
	UploadedBy uuid.UUID
}

type Embedding struct {
	ID        uuid.UUID
	ContentID uuid.UUID
	Text      string
	Embedding interface{}
	CreatedAt time.Time
}

type ExtractedContent struct {
	ID         uuid.UUID
	DocumentID uuid.UUID
	Content    string
	CreatedAt  time.Time
}

type Message struct {
	ID             uuid.UUID
	ConversationID uuid.UUID
	Content        string
	Sender         SenderType
	CreatedAt      time.Time
}

type User struct {
	ID        uuid.UUID
	Username  string
	Email     string
	Password  string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Role      UserType
}
