// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: messages.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addMessage = `-- name: AddMessage :one
INSERT INTO messages (conversation_id, content, sender) VALUES ($1, $2, $3) RETURNING id, conversation_id, content, sender, created_at
`

type AddMessageParams struct {
	ConversationID uuid.UUID
	Content        string
	Sender         SenderType
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, addMessage, arg.ConversationID, arg.Content, arg.Sender)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Content,
		&i.Sender,
		&i.CreatedAt,
	)
	return i, err
}

const findMessageByID = `-- name: FindMessageByID :one
SELECT id, conversation_id, content, sender, created_at FROM messages WHERE id = $1 LIMIT 1
`

func (q *Queries) FindMessageByID(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRowContext(ctx, findMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Content,
		&i.Sender,
		&i.CreatedAt,
	)
	return i, err
}

const findMessages = `-- name: FindMessages :many
SELECT id, conversation_id, content, sender, created_at FROM messages
`

func (q *Queries) FindMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, findMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.Content,
			&i.Sender,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMessagesByConversationID = `-- name: FindMessagesByConversationID :many
SELECT id, conversation_id, content, sender, created_at FROM messages WHERE conversation_id = $1
`

func (q *Queries) FindMessagesByConversationID(ctx context.Context, conversationID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, findMessagesByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.Content,
			&i.Sender,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMessage = `-- name: RemoveMessage :exec
DELETE FROM messages WHERE id = $1
`

func (q *Queries) RemoveMessage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeMessage, id)
	return err
}
